MODULE saturn

TITLE 'Saturn address decoding with ROM/IO waitstates.'
// Revision: 	0.1
// Date:	01/03/2018
//
//                           G  V
//                           N  C
//                           D  C
//         ____________________________________
//        /   6  5  4  3  2  1 44 43 42 41 40  \
//       |  7                                39 |
//       |  8                                38 |
//       |  9                                37 |
//    TDI| 10                                36 |
//       | 11                                35 |TDO
//    GND| 12           ispMACH4A            34 |GND
//    TCK| 13          44-Lead PLCC          33 |
//       | 14                                32 |TMS
//       | 15                                31 |
//       | 16                                30 |
//       | 17                                29 |
//       |   18 19 20 21 22 23 24 25 26 27 28   |
//        \____________________________________/
//                        V  G
//                        C  N
//                        C  D
//


"INPUT
A15..A8	PIN;					"Address lines
D4..D0	PIN;					"Data lines / Bank lines
PHI	PIN 11;					"System clock
RWB	PIN;					"R/~W
VDA	PIN;					"Valid data address
VPA	PIN;					"Valid program address
RESB	PIN;					"System reset

"OUTPUT
A16..A18	PIN	ISTYPE 'COM';		"Address lines
!RAM0		PIN	ISTYPE 'COM';		"RAM chip select
!RAM1		PIN	ISTYPE 'COM';		"RAM chip select
!RAM2		PIN	ISTYPE 'COM';		"RAM chip select
!RAM3		PIN	ISTYPE 'COM';		"RAM chip select
!ROM		PIN	ISTYPE 'COM';		"ROM chip select
!RD		PIN	ISTYPE 'COM';		"Read data
!WD		PIN	ISTYPE 'COM';		"Write data
STP		PIN	ISTYPE 'COM';		"Wait-state control
!DUART		PIN	ISTYPE 'COM';		"DUART chip select
!RTC		PIN	ISTYPE 'COM';		"RTC chip select
!IO0		PIN	ISTYPE 'COM';		"IO0 chip select
!IO1		PIN	ISTYPE 'COM';		"IO1 chip select
!IO2		PIN	ISTYPE 'COM';		"IO2 chip select
!IO3		PIN	ISTYPE 'COM';		"IO3 chip select

ramsel	node;					"1 = RAM selected
bank0	node;					"1 = address is $000000 - $00FFFF
basram	node;					"1 = address is $000000 - $00BFFF
bavalid	node;					"1 = bank address valid
cblk	node;					"1 = address is $00C000 - $00CFFF
dblk	node;					"1 = address is $00D000 - $00DFFF
eblk	node;					"1 = address is $00E000 - $00EFFF
extram	node;					"1 = address is $010000 - $07FFFF
hmusel	node;					"1 = HMU being accessed
hiramwp	node;					"1 = HIRAM write protected
ioblk	node;					"1 = I/O address space being accessed
iosel	node;					"1 = I/O device selected
mcfgsel	node;					"1 = HMU configuration being accessed

rhflag	node;					"1 = data fetch on high clock
romsel	node;					"1 = ROM selected
wsext	node;					"1 = hold bus & control states
vab	node;					"1 = address bus valid
wdflag	node;					"1 = data store
whflag	node;					"1 = data store on high clock
wsflag	node;					"1 = wait-state required
d8ram	node;
hmu	node;
ram0sel node;
ram1sel node;
ram2sel node;
ram3sel node;
blatch0..blatch4	NODE ISTYPE 'REG,BUFFER';			"Bank address latches
hmucfg0..hmucfg3	NODE ISTYPE 'REG,buffer';			"HMU latches
wsff0..wsff1		NODE ISTYPE 'REG,BUFFER';			"Wait-state latches

blatch = [blatch0..blatch4];
hmucfg = [hmucfg0..hmucfg3];
wsff = [wsff0..wsff1];

cblkmap = hmucfg0;				"LORAM/LOROM control
eblkmap = hmucfg1;				"HIROM/HIRAM control
dblkmap = hmucfg2;				"IODEV/IORAM control
eblkctl = hmucfg3;				"HIRAM write control

H,L,X = 1,0,.X.;
Address = [D4, D3, D2, D1, D0, A15,A14,A13,A12, A11,A10,A9,A8, X,X,X,X, X,X,X,X];

EQUATIONS

"Resets, flags
wsff.clk = PHI;
hmucfg.ar = !RESB.pin;

"Intermediate control logic
vab 	= VDA # VPA;				"True if valid address
bavalid	= vab & !PHI;				"True if bank address valid
rhflag	= RWB & PHI;				"True if fetch on high clock
wdflag	= !RWB;					"True if store
whflag	= !RWB & PHI;				"True if store on high clock

"A16-A18 latching logic
blatch.le	= bavalid & !wsext;	"Open latches, unless in wait-state
blatch.d	= [D0..D4] & bavalid & !wsext;	"Capture bank, unless in wait-state
bank0	= (blatch == [0,0,0,0,0]);
extram	= !bank0;

"Memory map basic logic
basram	= bank0 & !(A15 & A14);			" $000000-$00BFFF
cblk	= bank0 & A15 & A14 & !A13 & !A12;	" $00C000-$00CFFF
dblk	= bank0 & A15 & A14 & !A13 & A12;	" $00D000-$00DFFF
eblk	= bank0 & A15 & A14 & A13;		" $00E000-$00FFFF

ioblk	= dblk & !A11;				" $00D000-$00D7FF
d8ram	= dblk & A11 & !(A10 & A9 & A8);	" $00D800-$00DEFF
hmu	= dblk & A11 & A10 & A9 & A8;		" $00DF00-$00DFFF

"RAM & ROM selection logic
ramsel	= basram # (cblk & wdflag) # (cblk & !cblkmap) # (ioblk & dblkmap) # d8ram # (eblk & wdflag) # (eblk & eblkmap) # extram;
romsel	= (cblk & cblkmap & RWB) # (eblk & !eblkmap & RWB);
ram0sel	= !blatch3 & ramsel;
ram1sel	= blatch3 & ramsel;
hiramwp	= ram0sel & eblk & eblkctl;		" true if HIRAM is write protected

"I/O devices selection logic
iosel = vab & ioblk & !dblkmap;			" $00D0xx-$00Dexx if mapped

"Wait-state logic
wsflag = iosel # ramsel;			" wait-state if I/O or ROM selected
wsff0.ar = !wsflag;				" reset when wait-state initiated
wsff1.ap = !wsflag;				" start low when wait-state initiated
wsff1.d	 = wsff0;				" chain
wsff0.d  = !wsff1;				" feedback
wsext    = PHI # !wsff1;			" 1 = wait-state in progress

"Control output statements
[A16..A18] = [blatch0..blatch2] & vab;		" A16-A18 address bits
DUART =  iosel & !A10 & !A9 & !A8;
RTC   =  iosel & !A10 & !A9 &  A8;
IO0   =  iosel & !A10 &  A9 & !A8;
IO1   =  iosel & !A10 &  A9 &  A8;
IO2   =  iosel &  A10 & !A9 & !A8;
IO3   =  iosel &  A10 & !A9 &  A8;
RAM0  =  ram0sel & vab;
RAM1  =  ram1sel & vab;
RD    =  RWB & wsext & vab;
STP   =  wsff1;					" MPU wait-state input
STP.oe = wsflag;				" active if wait-stating
ROM   =  romsel;
WD    =  wdflag & wsext & vab & !hiramwp;

"HMU register read/write statements
[D0..D3].oe = hmu & rhflag;
[D0..D3]    = hmu & hmucfg & rhflag;

hmucfg.le = hmu & whflag;
hmucfg.d  = hmu & [D0..D3] & whflag;

END
